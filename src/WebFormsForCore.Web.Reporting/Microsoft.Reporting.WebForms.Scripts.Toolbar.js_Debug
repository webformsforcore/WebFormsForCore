// <copyright company="Microsoft">
//     Copyright (c) Microsoft.  All rights reserved.
// </copyright>
Type.registerNamespace("Microsoft.Reporting.WebFormsClient");

Microsoft.Reporting.WebFormsClient._Toolbar = function (element)
{
    Microsoft.Reporting.WebFormsClient._Toolbar.initializeBase(this, [element]);

    this.m_reportViewer = null;
    this.m_onReportViewerLoadingChangedDelegate = Function.createDelegate(this, this.OnReportViewerLoadingChanged);
    this.m_onReportAreaContentChangedDelegate = Function.createDelegate(this, this.OnReportAreaContentChanged);

    // Page Nav
    this.CurrentPage = 0;
    this.TotalPages = 0;
    this.IsEstimatePageCount = true;
    this.m_currentPageTextBox = null;
    this.m_totalPagesLabel = null;
    this.m_firstPageNavButton = null;
    this.m_prevPageNavButton = null;
    this.m_nextPageNavButton = null;
    this.m_lastPageNavButton = null;
    this.InvalidPageNumberMessage = null;
    this.OnCurrentPageClick = null;

    // Drillthrough Back
    this.IsDrillthroughReport = false;
    this.m_drillBackButton = null;

    // Refresh
    this.m_refreshButton = null;
    this.m_onRefreshClickDelegate = Function.createDelegate(this, this.OnRefreshClick);

    // Zoom
    this.m_zoomDropDown = null;
    this.m_zoomSelectionChangeDelegate = Function.createDelegate(this, this.OnZoomSelectionChanged);
    this.m_externalZoomChangeDelegate = Function.createDelegate(this, this.OnZoomChangedExternal);

    // Find
    this.m_findTextBox = null;
    this.m_findButton = null;
    this.m_findNextButton = null;
    this.CanFindNext = false;
    this.FindTextBoxPollInterval = null;
    this.m_onFindTextChangeDelegate = Function.createDelegate(this, this.OnFindTextChanged);
    this.m_onFindTextFocusDelegate = Function.createDelegate(this, this.OnFindTextFocus);
    this.m_onFindTextBlurDelegate = Function.createDelegate(this, this.OnFindTextBlur);
    this.m_enableDisableFindButtonsDelegate = Function.createDelegate(this, this.CheckEnableDisableFindButtons);
    this.m_onFindClickDelegate = Function.createDelegate(this, this.OnFindClick);
    this.m_onFindNextClickDelegate = Function.createDelegate(this, this.OnFindNextClick);

    // Export
    this.m_exportButton = null;

    // Print
    this.m_printButton = null;
    this.m_onPrintClickDelegate = Function.createDelegate(this, this.OnPrintClick);

    // Atom Data Feed
    this.m_atomDataFeedButton = null;
    this.m_onAtomDataFeedClickDelegate = Function.createDelegate(this, this.OnAtomDataFeedClick);

    this.m_isFirstEnable = true;
}

Microsoft.Reporting.WebFormsClient._Toolbar.prototype =
{
    initialize: function ()
    {
        Microsoft.Reporting.WebFormsClient._Toolbar.callBaseMethod(this, "initialize");

        // Assumes viewer was created first
        this.m_reportViewer.add_propertyChanged(this.m_onReportViewerLoadingChangedDelegate);
        this.m_reportViewer.add_propertyChanged(this.m_onReportAreaContentChangedDelegate);

        // Don't postback the zoom dropdown.  It isn't used on the server and can cause event
        // validation to fail in some cases, such as when a custom value is added to the dropdown
        // on the client.
        if (this.m_zoomDropDown != null)
            this.m_zoomDropDown.name = null;
    },

    dispose: function ()
    {
        if (this.FindTextBoxPollInterval != null)
        {
            clearInterval(this.FindTextBoxPollInterval);
        }

        Microsoft.Reporting.WebFormsClient._Toolbar.callBaseMethod(this, "dispose");

        // Disconnect from the report viewer
        if (this.m_reportViewer != null)
        {
            this.m_reportViewer.remove_propertyChanged(this.m_onReportViewerLoadingChangedDelegate);
            this.m_reportViewer.remove_propertyChanged(this.m_onReportAreaContentChangedDelegate);
            this.m_reportViewer.remove_propertyChanged(this.m_externalZoomChangeDelegate);
        }

        if (this.m_currentPageTextBox != null)
        {
            $clearHandlers(this.m_currentPageTextBox);

            this.m_currentPageTextBox = null;
            this.m_totalPagesLabel = null;
            this.m_firstPageNavButton = null;
            this.m_prevPageNavButton = null;
            this.m_nextPageNavButton = null;
            this.m_lastPageNavButton = null;
        }

        if (this.m_findTextBox != null)
        {
            $clearHandlers(this.m_findTextBox);

            this.m_findTextBox = null;
            this.m_findButton = null;
            this.m_findNextButton = null;
        }

        this.m_drillBackButton = null;
        this.m_zoomDropDown = null;
        this.m_refreshButton = null;
        this.m_exportButton = null;
        this.m_printButton = null;
        this.m_atomDataFeedButton = null;

        // Delete all the delegates
        if (this.m_onFindTextChangeDelegate != null)
        {
            delete this.m_onFindTextChangeDelegate;
            this.m_onFindTextChangeDelegate = null;

            delete this.m_onFindTextFocusDelegate;
            this.m_onFindTextFocusDelegate = null;

            delete this.m_onFindTextBlurDelegate;
            this.m_onFindTextBlurDelegate = null;

            delete this.m_enableDisableFindButtonsDelegate;
            this.m_enableDisableFindButtonsDelegate = null;

            delete this.m_onFindClickDelegate;
            this.m_onFindClickDelegate = null;

            delete this.m_onFindNextClickDelegate;
            this.m_onFindNextClickDelegate = null;

            delete this.m_zoomSelectionChangeDelegate;
            this.m_zoomSelectionChangeDelegate = null;

            delete this.m_externalZoomChangeDelegate;
            this.m_externalZoomChangeDelegate = null;

            delete this.m_onPrintClickDelegate;
            this.m_onPrintClickDelegate = null;

            delete this.m_onAtomDataFeedClickDelegate;
            this.m_onAtomDataFeedClickDelegate = null;

            delete this.m_onRefreshClickDelegate;
            this.m_onRefreshClickDelegate = null;

            delete this.m_onReportViewerLoadingChangedDelegate;
            this.m_onReportViewerLoadingChangedDelegate = null;

            delete this.m_onReportAreaContentChangedDelegate;
            this.m_onReportAreaContentChangedDelegate = null;
        }
    },

    set_CurrentPageTextBox: function (value) { this.m_currentPageTextBox = value; },
    get_CurrentPageTextBox: function () { return this.m_currentPageTextBox; },
    set_TotalPagesLabel: function (value) { this.m_totalPagesLabel = value; },
    get_TotalPagesLabel: function () { return this.m_totalPagesLabel; },
    set_FirstPageNavButton: function (value) { this.m_firstPageNavButton = value; },
    get_FirstPageNavButton: function () { return this.m_firstPageNavButton; },
    set_PrevPageNavButton: function (value) { this.m_prevPageNavButton = value; },
    get_PrevPageNavButton: function () { return this.m_prevPageNavButton; },
    set_NextPageNavButton: function (value) { this.m_nextPageNavButton = value; },
    get_NextPageNavButton: function () { return this.m_nextPageNavButton; },
    set_LastPageNavButton: function (value) { this.m_lastPageNavButton = value; },
    get_LastPageNavButton: function () { return this.m_lastPageNavButton; },

    set_FindTextBox: function (value) { this.m_findTextBox = value; },
    get_FindTextBox: function () { return this.m_findTextBox; },
    set_FindButton: function (value) { this.m_findButton = value; },
    get_FindButton: function () { return this.m_findButton; },
    set_FindNextButton: function (value) { this.m_findNextButton = value; },
    get_FindNextButton: function () { return this.m_findNextButton; },

    set_ZoomDropDown: function (value) { this.m_zoomDropDown = value; },
    get_ZoomDropDown: function () { return this.m_zoomDropDown; },
    set_RefreshButton: function (value) { this.m_refreshButton = value; },
    get_RefreshButton: function () { return this.m_refreshButton; },
    set_DrillBackButton: function (value) { this.m_drillBackButton = value; },
    get_DrillBackButton: function () { return this.m_drillBackButton; },
    set_ExportButton: function (value) { this.m_exportButton = value; },
    get_ExportButton: function () { return this.m_exportButton; },
    set_PrintButton: function (value) { this.m_printButton = value; },
    get_PrintButton: function () { return this.m_printButton; },
    set_AtomDataFeedButton: function (value) { this.m_atomDataFeedButton = value; },
    get_AtomDataFeedButton: function () { return this.m_atomDataFeedButton; },

    set_ReportViewer: function (value)
    {
        this.m_reportViewer = value;
    },

    ConnectEventHandlers: function ()
    {
        // PageNav
        if (this.m_currentPageTextBox != null)
        {
            $addHandlers(this.m_currentPageTextBox,
                { "keypress": this.OnCurrentPageKeyPress },
                this);
        }

        // Find
        if (this.m_findTextBox != null)
        {
            // onpropertychange is an IE only event, if it does not exist we use polling on onfocus instead.
            if (typeof this.m_findTextBox.onpropertychange != 'undefined')
            {
                this.m_findTextBox.onpropertychange = this.m_onFindTextChangeDelegate;
            }
            else
            {
                this.m_findTextBox.onfocus = this.m_onFindTextFocusDelegate;
                this.m_findTextBox.onblur = this.m_onFindTextBlurDelegate;
            }

            $addHandlers(this.m_findTextBox,
                { "keypress": this.OnFindTextKeyPress },
                this);

            this.m_findButton.control.OnClickScript = this.m_onFindClickDelegate;

            this.m_findNextButton.control.OnClickScript = this.m_onFindNextClickDelegate;
        }

        // Zoom
        if (this.m_zoomDropDown != null)
        {
            this.m_zoomDropDown.onchange = this.m_zoomSelectionChangeDelegate;

            this.m_reportViewer.add_propertyChanged(this.m_externalZoomChangeDelegate);
        }

        // Print
        if (this.m_printButton != null)
            this.m_printButton.control.SetOnClickHandler(true, this.m_onPrintClickDelegate);

        // Atom Data Feed
        if (this.m_atomDataFeedButton != null)
            this.m_atomDataFeedButton.control.SetOnClickHandler(true, this.m_onAtomDataFeedClickDelegate);

        // Refresh
        if (this.m_refreshButton != null)
            this.m_refreshButton.control.SetOnClickHandler(true, this.m_onRefreshClickDelegate);
    },

    OnReportViewerLoadingChanged: function (sender, e)
    {
        if (e.get_propertyName() == "isLoading")
        {
            var isLoading = this.m_reportViewer.get_isLoading();

            this.EnableDisable(!isLoading);
        }
    },

    OnReportAreaContentChanged: function (sender, e)
    {
        if (e.get_propertyName() == "reportAreaContentType")
        {
            var updateProperties = this.m_reportViewer._get_toolBarUpdate();
            if (updateProperties != null)
                this.UpdateForNewReportPage(updateProperties);
        }
    },

    EnableDisable: function (forEnable)
    {
        if (forEnable)
        {
            if (this.m_isFirstEnable)
            {
                this.ConnectEventHandlers();
                this.m_isFirstEnable = false;
            }
        }

        // Enable/Disable UI elements.  If enabling and about to trigger a postback
        // (which would just disable things again), skip the enable.
        if (!forEnable || !Microsoft.Reporting.WebFormsClient._ReportAreaAsyncLoadTarget.AsyncTriggerSelected)
        {
            var reportAreaContentType = Microsoft.Reporting.WebFormsClient.ReportAreaContent.None;
            if (forEnable)
            {
                // Only get the content type if we are enabling the toolbar.  Otherwise it isn't available yet.
                reportAreaContentType = this.m_reportViewer.get_reportAreaContentType();
            }
            var isDisplayingReportPage = reportAreaContentType == Microsoft.Reporting.WebFormsClient.ReportAreaContent.ReportPage;

            // this is a rather implicit way to determine if the user canceled a report rendering
            // if the viewer is no longer loading and the viewer has no content, then the only way that is possible is if the user
            // canceled the request.
            var canceled = !this.m_reportViewer.get_isLoading() && reportAreaContentType == Microsoft.Reporting.WebFormsClient.ReportAreaContent.None;

            // Drillthrough Back
            // it should be enabled if this is a drillthrough report and the whole toolbar is enabled or the viewer is in the canceled state
            var enableBack =
                (forEnable ||
                canceled) &&
                this.IsDrillthroughReport;
            this.EnableDisableImage(this.m_drillBackButton, enableBack);

            // Refresh
            // should always be enabled if the user has put the viewer in a canceled state
            var enableRefresh =
                (forEnable &&
                (isDisplayingReportPage ||
                 reportAreaContentType == Microsoft.Reporting.WebFormsClient.ReportAreaContent.Error)) ||
                 canceled;
            this.EnableDisableImage(this.m_refreshButton, enableRefresh);

            // Page Nav
            var canPageNav = reportAreaContentType == Microsoft.Reporting.WebFormsClient.ReportAreaContent.ReportPage;
            var canPageNavBackward = canPageNav && this.CurrentPage > 1;
            var canPageNavForward = canPageNav && (this.CurrentPage < this.TotalPages || this.IsEstimatePageCount);
            this.EnableDisableWebControl(this.m_currentPageTextBox, isDisplayingReportPage);
            this.EnableDisableImage(this.m_firstPageNavButton, isDisplayingReportPage && canPageNavBackward);
            this.EnableDisableImage(this.m_prevPageNavButton, isDisplayingReportPage && canPageNavBackward);
            this.EnableDisableImage(this.m_nextPageNavButton, isDisplayingReportPage && canPageNavForward);
            this.EnableDisableImage(this.m_lastPageNavButton, isDisplayingReportPage && canPageNavForward);

            // Zoom
            this.EnableDisableWebControl(this.m_zoomDropDown, isDisplayingReportPage);

            // Find
            this.EnableDisableWebControl(this.m_findTextBox, isDisplayingReportPage);
            this.EnableDisableFindButtons(isDisplayingReportPage);

            // Export
            this.EnableDisableExportButton(isDisplayingReportPage);

            // Print
            this.EnableDisableImage(this.m_printButton, isDisplayingReportPage);

            // Atom Data Feed
            this.EnableDisableImage(this.m_atomDataFeedButton, isDisplayingReportPage);
        }
    },

    UpdateForNewReportPage: function (updateProperties)
    {
        // Store the new property values
        this.CurrentPage = updateProperties.CurrentPage;
        this.TotalPages = updateProperties.TotalPages;
        this.IsEstimatePageCount = updateProperties.IsEstimatePageCount;

        // Update the current page UI
        if (this.m_currentPageTextBox != null)
            this.m_currentPageTextBox.value = this.CurrentPage;

        // Update the total pages UI
        if (this.m_totalPagesLabel != null)
            this.m_totalPagesLabel.innerHTML = updateProperties.TotalPagesString;

        // Assume zoom level may have changed.  Re-read it from the viewer object
        this.SetUIToCurrentZoomLevel();

        // Update the search string
        if (this.m_findTextBox != null)
            this.m_findTextBox.value = updateProperties.SearchText;

        this.CanFindNext = updateProperties.CanFindNext;

        this.EnableDisable(true);
    },

    EnableDisableFindButtons: function (forEnable)
    {
        if (this.m_findTextBox == null)
            return;

        var findBox = this.m_findTextBox;
        var findBoxHasText = findBox != null && findBox.value != null && findBox.value != "";

        this.EnableDisableTextButton(this.m_findButton, forEnable && findBoxHasText);
        this.EnableDisableTextButton(this.m_findNextButton, forEnable && this.CanFindNext);
    },

    EnableDisableExportButton: function (forEnable)
    {
        this.EnableDisableTextButton(this.m_exportButton, forEnable);
    },

    EnableDisableWebControl: function (element, forEnable)
    {
        if (element != null)
            element.disabled = forEnable ? null : "disabled";
    },

    EnableDisableImage: function (element, forEnable)
    {
        if (element != null && element.control != null)
        {
            element.control.ShowImage(forEnable);
            element.disabled = forEnable ? null : "disabled";
        }
    },

    EnableDisableTextButton: function (element, forEnable)
    {
        if (element != null && element.control != null)
            element.control.SetActive(forEnable);
    },

    OnFindClick: function ()
    {
        var searchText = this.m_findTextBox.value;

        this.m_reportViewer.find(searchText);
    },

    OnFindNextClick: function ()
    {
        this.m_reportViewer.findNext();
    },

    OnFindTextChanged: function ()
    {
        if (event.propertyName == "value")
        {
            this.CanFindNext = false;
            this.EnableDisableFindButtons(true);
        }
    },

    OnFindTextFocus: function ()
    {
        this.FindTextBoxPollInterval = setInterval(this.m_enableDisableFindButtonsDelegate, 250);
    },

    OnFindTextBlur: function ()
    {
        clearInterval(this.FindTextBoxPollInterval);
        this.EnableDisableFindButtons(true);
    },

    OnFindTextKeyPress: function (e)
    {
        if (e.charCode == 10 || e.charCode == 13)
        {
            this.OnFindClick();
            e.preventDefault();
        }
    },

    OnCurrentPageKeyPress: function (e)
    {
        if (e.charCode == 10 || e.charCode == 13)
        {
            var pageNumber = parseInt(this.m_currentPageTextBox.value, 10);
            if (isNaN(pageNumber) || pageNumber < 1 || (pageNumber > this.TotalPages && !this.IsEstimatePageCount))
                alert(this.InvalidPageNumberMessage);
            else
                this.OnCurrentPageClick();

            e.preventDefault();
        }
    },

    CheckEnableDisableFindButtons: function ()
    {
        this.EnableDisableFindButtons(true);
    },

    OnZoomSelectionChanged: function ()
    {
        this.m_reportViewer.set_zoomLevel(this.m_zoomDropDown.value);
    },

    OnZoomChangedExternal: function (sender, e)
    {
        if (e.get_propertyName() == "zoomLevel")
            this.SetUIToCurrentZoomLevel();
    },

    SetUIToCurrentZoomLevel: function ()
    {
        var zoomDropDown = this.m_zoomDropDown;
        if (zoomDropDown == null)
            return;

        // Get the new zoom level
        var zoomLevel = this.m_reportViewer.get_zoomLevel();

        var options = zoomDropDown.options;

        // Find an existing option in the dropdown that matches the new zoom level
        for (var i = 0; i < options.length; i++)
        {
            if (options(i).value == zoomLevel)
            {
                if (zoomDropDown.selectedIndex != i)
                    zoomDropDown.selectedIndex = i;
                return;
            }
        }

        // Couldn't find one so this must be a custom zoom percentage.  Add a
        // new option for it and select it.
        var newOption = document.createElement("option");
        newOption.text = escape(zoomLevel) + "%";
        newOption.value = zoomLevel;
        zoomDropDown.add(newOption);
        zoomDropDown.selectedIndex = options.length - 1;
    },


    OnPrintClick: function ()
    {
        this.m_reportViewer.invokePrintDialog();
    },

    OnAtomDataFeedClick: function ()
    {
        this.m_reportViewer.exportReport("ATOM");
    },

    OnRefreshClick: function ()
    {
        this.m_reportViewer.refreshReport();
    }
}

Microsoft.Reporting.WebFormsClient._Toolbar.registerClass("Microsoft.Reporting.WebFormsClient._Toolbar", Sys.UI.Control);
